#!/bin/bash
# --------------------------------------------------------------------------- #
# glwu.boss : Master script to run the multi-grid ocean wave model             #
#                parallel version and/or private pieces of it.                #
#                                                                             #
# Remarks      - Can be run interactively, or from LSF                        #
#                                                                             #
# Origination                                                   April 2011    #
# Transition to WCOSS                                           Dec   2012    #
# Transition to CRAY                                            May   2016    #
# --------------------------------------------------------------------------- #
# 0.  Initializations
# 0.a LSF stuff

# LSF options
#PBS -l walltime=06:00:00
#PBS -q dev
#PBS -N glwu.web.boss.lsf
#PBS -l select=1:ncpus=1:mem=1000MB
#PBS -A GLWU-DEV
#PBS -V
#PBS -j oe
#PBS -o glwu.web.boss.out
#PBS -e glwu.web.boss.out

cd $PBS_O_WORKDIR

set -xa
# Setup and load modules 
source $MODULESHOME/etc/modules.sh
module purge
module load PrgEnv-intel/8.1.0
module load craype/2.7.8
module load intel/19.1.3.304
module load cfp/2.0.4
module load prod_util/2.0.8

# Set runuser
export runuser=$(whoami)
envir=dev

# 0.a Version card

# sysver=`pwd | sed 's/\// /g' | awk '{print $NF}'`

NWROOT=/lfs/h2/emc/couple/noscrub/${runuser}      # root of file system
LSFDIR=/lfs/h2/emc/couple/noscrub/${runuser}/glwu/${sysver}/dev/lsf_scripts_plots_dangerseas

cd ${LSFDIR}

version_file=$NWROOT/glwu/${sysver}/versions/run.ver      # file with version info

 if ! [ ${glwu_ver} ]
 then
  if [ -f $version_file ]
  then
    . $version_file
    echo $glwu_ver
  else
    echo ' '
    echo ' ***********************************************************'
    echo ' *** FILE WITH VERSION INFO NOT FOUND (versions/run.ver) ***'
    echo ' ***********************************************************'
    echo ' '
    exit 20
  fi
 fi

# 0.a Set necessary variables

export NET=glwu

  host_s=`hostname | cut -c1-1`
  case $host_s in
   'c' ) host='cactus'; ohost='dogwood' ;;
   'd' ) host='dogwood'; ohost='cactus' ;;
  esac 

  export modID=glwu
  export MODID=GLWU
  export start_dir=${LSFDIR}  # start/work dir.

# USHwave changed to USHwavepa to avoid mixup with USHwave in j-jobs
  if [ "$envir" = "ops" ]
  then
    dirext=
  else
    dirext="_${envir}"
  fi
  export GLWUdir=GLWU
  export UTILdir=${GLWUdir}/util/ush

  export USHwavepa=/lfs/h2/emc/couple/noscrub/${runuser}/${UTILdir}
  export com=/lfs/h2/emc/couple/noscrub/${runuser}/${GLWUdir}/com/${modID}/${glwu_ver}

  #export wavelog=${com}/${modID}.log                     # log for wave com
  export wavelog=/lfs/h2/emc/couple/noscrub/${runuser}/${GLWUdir}/com/output/${modID}.web.log      # log for wave com

  if [ -f $wavelog ]
  then
    rm $wavelog
  fi

  if [ -f ${com}/wave.web.log ]
  then
    rm ${com}/wave.web.log
  fi

  touch $wavelog
  export web=/lfs/h2/emc/couple/noscrub/${runuser}/${GLWUdir}/WEB${dirext}
  export weblog=${web}/${modID}.log                      # log for web page
  export out=/lfs/h2/emc/couple/noscrub/${runuser}/${GLWUdir}/com/output

  export iceID=icean_5m                              # ice ID
  export wndID=glwu                              # wind ID (for the WW3 grid used for wind data)
  export COMDATE=/lfs/h2/emc/couple/noscrub/${runuser}/glwu/${sysver}/dev/lsf_scripts_plots_dangerseas      # directory where PDY date                                                      # stored
#JS="WEB PUBWEB ARC WEB"
#JS="PREP FORECAST POST WEB PUBWEB"
#JS="PREP FORECAST POST WEB"
JS="WEB2 WEB3"

  for j in ${JS}
  do
    export main_jobs="${main_jobs} J${NET^^}_${j}"                 # main jobs, to be run
  done                                                                  #   sequentially.
                                                     # SEE ALSO 0.c !!!
  export spin_jobs= # jobs to be spun off.
  export aux_jobs='                  '         # aux jobs, to be run
                                                     #   in parallel.

  export cycle_PDY='yes'                             # update PDY file ?

  export DATA=/lfs/h2/emc/ptmp/${runuser}/${NET}/${glwu_ver}                  # Temporary base directory
  export lsfst=$DATA/lsf.$modID.${glwu_ver}.boss.web.out.$$            # work file for lsfsubmit
  export lsfse=$DATA/lsf.$modID.${glwu_ver}.boss.web.err.$$            # work file for lsfsubmit

  if [ ! -d "$DATA" ]
  then
    mkdir -p $DATA
  fi

  if [ ! -d "$out" ]
  then
    mkdir -p $out
  fi


  if [ ! -d "$com" ]
  then
    mkdir -p $com
  fi

# 0.b ID output

  cd $start_dir

  echo ' '
  echo '                  ***************************************'
  echo '                  *** NWW3 MASTER SCRIPT glwu.boss ***'
  echo '                  ***************************************'
  echo ' '
  echo " Time : `date`"
  echo ' '
  echo '        Script settings :'
  echo '        ------------------------------------------------------------'
  echo "           model ID           : $modID"
  echo "           com directory      : $com"
  echo "           web directory      : $web"
  echo "           output directory   : $out"
  echo "           main jobs          : $main_jobs"
  echo "           spin-off jobs      : $spin_jobs"
  echo "           auxiliary jobs     : $aux_jobs"

# 0.c Set run time

  if [ -f $COMDATE/PDY_${modID} ]
  then
    . $COMDATE/PDY_${modID} 
  else
    echo ' '
    echo ' ***************************************************'
    echo " *** FILE WITH TIME INFO NOT FOUND (PDY_$modID) ***"
    echo ' ***************************************************'
    echo ' '
    date=`date -u +"%Y%m%d t%Hz"`
    echo "$modID.web.boss $date : PDY file not found." >> $wavelog
    exit 1
  fi

  export runID=glwu

  date=$PDY
  cycle=t${cyc}z
  YMDH=$date$cyc

  echo ' '
  echo "           date and cycle     : $date $cycle"

# 0.d Set Check files

  export J${NET^^}_PREP=${runID}.${wndID}.${cycle}.wind
  export J${NET^^}_FORECAST=where_${runID}_ran.$cycle
  export J${NET^^}_POST=${runID}.$cycle.postdone
  export J${NET^^}_PGEN=${runID}.$cycle.awipsbull
  export J${NET^^}_WEB=${runID}.$cycle.webdone
  export J${NET^^}_WEB2=${runID}.$cycle.web2done
  export J${NET^^}_WEB3=${runID}.$cycle.web3done
  export J${NET^^}_ARC=${runID}.$cycle.arcdone
  export J${NET^^}_PUBWEB=${runID}.$cycle.pubwebdone
  export J${NET^^}_COPY=${runID}.$cycle.pushrestartdone

# 0.e Run cleanup script

   ${USHwavepa}/cleanup.sh  $main_jobs $spin_jobs $aux_jobs

# --------------------------------------------------------------------------- #
# 1.  Clean up files
#     Directories done in scrub.boss

  echo ' '
  echo " Time : `date`"
  echo ' '
  echo '        Clean up files :'
  echo '        ------------------------------------------------------------'

# 1.a Clean up output files

  if [ -n "$main_jobs" ] || [ -n "$spin_jobs" ] || [ -n "$aux_jobs" ]
  then
    for job in $main_jobs $spin_jobs $aux_jobs
    do
      jobout=`cat ${job}.lsf | grep 'export job=' | sed 's/=/ /g' | awk '{print $3}'`
      if [ -f $jobout.out ]
      then
        echo "           Removing $jobout.out"
        rm -f $jobout.out
      else
        echo "           File $jobout.out not found."
      fi
    done
  fi

# --------------------------------------------------------------------------- #
# 2.  Run string of main jobs
# 2.a Making output directory if necessary

  cd $out
  if [ ! -d $date ]
  then
    echo "           Making output directory $out/$date"
    mkdir -p $date
  fi

  cd $com
  YMDHn=`$NDATE 24 $YMDH`
  daten="`echo $YMDHn | cut -c1-8`"

  if [ ! -d ${modID}.$date ]
  then
    echo "           Making com directory $com/${modID}.$date"
    mkdir -p ${modID}.$date
  fi

  if [ ! -d ${modID}.$daten ]
  then
    echo "           Making com directory $com/${modID}.$daten"
    mkdir -p ${modID}.$daten
  fi

  echo ' '
  echo " Time : `date`"
  echo ' '
  echo '        Run main jobs (sequentially) :'
  echo '        ------------------------------------------------------------'

# 2.b Running main jobs if any
  #XXX
  set -xa
  cd $start_dir

  if [ -z "$main_jobs" ]
  then
    echo "           No main jobs to submit."
  else
    for job in $main_jobs
    do
      echo "           Starting $job at `date`"
      qsub ${job}.lsf  > $lsfst 2> $lsfse
      OK=$?
      if [ "$OK" != '0' ]
      then
        cat $lsfse
        echo "$modID.web.boss $date $cycle : Error in lsf (main)." >> $wavelog
        exit 2
      fi

      jobname="`sed 's/<//g' $lsfst | sed 's/>//g' | awk '{ print $1 }'`"
      echo "              Job name is $jobname"

# Output file name is now extracted from lsf Jscripts

      jobout=`cat ${job}.lsf | grep 'export job=' | sed 's/=/ /g' | awk '{print $3}'`
      echo " Out file is  ${jobout}.out"

      while [ "`qstat | grep $jobname | awk '{print $1}'`" = "$jobname" ] || [ ! -f ${jobout}.out ]
      do
        sleep 60
      done
      #mv ${jobout}.out $out/${modID}.$date/$job.$cycle.out
      mv ${jobout}.out $out/$date/$job.$cycle.out

#      eval echo $`echo $job` | read check
      check=$(eval echo $`echo $job`)
      if [ ! -f $com/${modID}.$date/$check ] && [ ! -f $com/${modID}.$date/wmo/$check ]
      then
        echo " ***********************************************"
        echo " *** CHECK FILE FOR THIS JOB CANNOT BE FOUND ***"
        echo " ***********************************************"
        echo "                     Directory : $com/${modID}.$date"
        echo "                     File      : $check"
        echo "$modID.web.boss $date $cycle : check file ${check} not found." >> $wavelog
        exit 3
      fi

      sleep 60

    done
    echo "           All finished at `date`"
  fi

# --------------------------------------------------------------------------- #
# 3.  Run string of spin-off jobs

  echo ' '
  echo " Time : `date`"
  echo ' '
  echo "        Submit spin-off jobs (don't wait) :"
  echo '        ------------------------------------------------------------'

  if [ -z "$spin_jobs" ]
  then
    echo "           No jobs to spin-off."
  else
    jobnames=
    for job in $spin_jobs
    do
      echo "           Starting $job at `date`"
      qsub $job  > $lsfst 2> $lsfse
      OK=$?
      if [ "$OK" != '0' ]
      then
        cat $lsfse
        echo "$modID.web.boss $date $cycle : Error in bsub (spin)." >> $wavelog
        exit 4
      fi
 
      jobname="`sed 's/\"//g' $lsfst | sed 's/\.ncep\.noaa\.gov//g' \
                                    | awk '{ print $4 }'`"
      echo "              Job name is $jobname"

    done
  fi

# --------------------------------------------------------------------------- #
# 4.  Run string of aux jobs

  echo ' '
  echo " Time : `date`"
  echo ' '
  echo '        Run auxiliary jobs (in parallel) :'
  echo '        ------------------------------------------------------------'

  if [ -z "$aux_jobs" ]
  then
    echo "           No auxiliary jobs to submit."
  else
    jobnames=
    for job in $aux_jobs
    do
      echo "           Starting $job at `date`"
      qsub $job.lsf  > $lsfst 2> $lsfse
      OK=$?
      if [ "$OK" != '0' ]
      then
        cat $lsfse
        echo "$modID.boss $date $cycle : Error in bsub (aux)." >> $wavelog
        exit 5
      fi
 
      jobname="`sed 's/\"//g' $lsfst | sed 's/\.ncep\.noaa\.gov//g' \
                                    | awk '{ print $4 }'`"
      echo "              Job name is $jobname"
 
      if [ -z "$jobnames" ]
      then
        jobnames=$jobname
      else
        jobnames="$jobnames $jobname"
      fi
    done

    for job in $aux_jobs
    do
# Output file name is now extracted from lsf Jscripts

      jobout=`cat ${job}.lsf | grep 'export job=' | sed 's/=/ /g' | awk '{print $3}'`
      echo " Out file is  ${jobout}.out"
      while [ ! -f ${jobout}.out ]
      do
        sleep 30
      done
    done

    for jobname in $jobnames
    do 
      while [ -n "`qstat | grep $jobname`" ]
      do
        sleep 60
      done
    done

    for job in $aux_jobs
    do
      jobout=`cat ${job}.lsf | grep 'export job=' | sed 's/=/ /g' | awk '{print $3}'`
      #mv ${jobout}.out $out/${modID}.$date/$job.$cycle.out
      mv ${jobout}.out $out/$date/$job.$cycle.out
    done

    echo "           All finished at `date`"
  fi

  #XXX rm -f $lsfst
  #XXX rm -f $lsfse

# --------------------------------------------------------------------------- #
# 5.  What to do next ?

  if [ "$cycle_PDY" = 'yes' ] 
  then
    echo ' '
    echo " Time : `date`"
    echo ' '

    DTCYC=1
    if  [ "$RetroRun" = "YES" ]
    then
       DTCYC=6
    fi
    if  [ "$RetroRun" = "NOT" ]
    then
       DTCYC=1
    fi

    YMDHn=`$NDATE ${DTCYC} $YMDH`
    daten="`echo $YMDHn | cut -c1-8`"
    cycn="`echo $YMDHn | cut -c9-10`"
    cyclen="t${cycn}z"

    cd $start_dir
    echo "export PDY=$daten"    > $COMDATE/PDY_${modID}
    echo "export cyc=$cycn"    >> $COMDATE/PDY_${modID}

    echo "        PDY file set to $daten $cyclen"

  fi

# --------------------------------------------------------------------------- #
# 6.  End of it all

  echo ' '
  echo " Time : `date`"
  echo ' '
  echo ' '
  echo '                        *** End of glwu.boss ***'

# - end of glwu.web.boss ----------------------------------------------------- #
